# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataFactory::Mgmt::V2018_06_01
  module Models
    #
    # Cursor methods for Mongodb query
    #
    class MongoDbCursorMethodsProperties

      include MsRestAzure

      # @return Unmatched properties from the message are deserialized this
      # collection
      attr_accessor :additional_properties

      # @return Specifies the fields to return in the documents that match the
      # query filter. To return all fields in the matching documents, omit this
      # parameter. Type: string (or Expression with resultType string).
      attr_accessor :project

      # @return Specifies the order in which the query returns matching
      # documents. Type: string (or Expression with resultType string). Type:
      # string (or Expression with resultType string).
      attr_accessor :sort

      # @return Specifies the how many documents skipped and where MongoDB
      # begins returning results. This approach may be useful in implementing
      # paginated results. Type: integer (or Expression with resultType
      # integer).
      attr_accessor :skip

      # @return Specifies the maximum number of documents the server returns.
      # limit() is analogous to the LIMIT statement in a SQL database. Type:
      # integer (or Expression with resultType integer).
      attr_accessor :limit


      #
      # Mapper for MongoDbCursorMethodsProperties class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'MongoDbCursorMethodsProperties',
          type: {
            name: 'Composite',
            class_name: 'MongoDbCursorMethodsProperties',
            model_properties: {
              additional_properties: {
                client_side_validation: true,
                required: false,
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              project: {
                client_side_validation: true,
                required: false,
                serialized_name: 'project',
                type: {
                  name: 'Object'
                }
              },
              sort: {
                client_side_validation: true,
                required: false,
                serialized_name: 'sort',
                type: {
                  name: 'Object'
                }
              },
              skip: {
                client_side_validation: true,
                required: false,
                serialized_name: 'skip',
                type: {
                  name: 'Object'
                }
              },
              limit: {
                client_side_validation: true,
                required: false,
                serialized_name: 'limit',
                type: {
                  name: 'Object'
                }
              }
            }
          }
        }
      end
    end
  end
end
