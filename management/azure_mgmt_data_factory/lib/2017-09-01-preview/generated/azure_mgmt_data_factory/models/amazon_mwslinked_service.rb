# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::DataFactory::Mgmt::V2017_09_01_preview
  module Models
    #
    # Amazon Marketplace Web Service linked service.
    #
    class AmazonMWSLinkedService < LinkedService

      include MsRestAzure


      def initialize
        @type = "AmazonMWS"
      end

      attr_accessor :type

      # @return The endpoint of the Amazon MWS server, (i.e.
      # mws.amazonservices.com)
      attr_accessor :endpoint

      # @return The Amazon Marketplace ID you want to retrieve data from. To
      # retrieve data from multiple Marketplace IDs, separate them with a comma
      # (,). (i.e. A2EUQ1WTGCTBG2)
      attr_accessor :marketplace_id

      # @return The Amazon seller ID.
      attr_accessor :seller_id

      # @return [SecretBase] The Amazon MWS authentication token.
      attr_accessor :mws_auth_token

      # @return The access key id used to access data.
      attr_accessor :access_key_id

      # @return [SecretBase] The secret key used to access data.
      attr_accessor :secret_key

      # @return Specifies whether the data source endpoints are encrypted using
      # HTTPS. The default value is true.
      attr_accessor :use_encrypted_endpoints

      # @return Specifies whether to require the host name in the server's
      # certificate to match the host name of the server when connecting over
      # SSL. The default value is true.
      attr_accessor :use_host_verification

      # @return Specifies whether to verify the identity of the server when
      # connecting over SSL. The default value is true.
      attr_accessor :use_peer_verification

      # @return The encrypted credential used for authentication. Credentials
      # are encrypted using the integration runtime credential manager. Type:
      # string (or Expression with resultType string).
      attr_accessor :encrypted_credential


      #
      # Mapper for AmazonMWSLinkedService class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'AmazonMWS',
          type: {
            name: 'Composite',
            class_name: 'AmazonMWSLinkedService',
            model_properties: {
              additional_properties: {
                client_side_validation: true,
                required: false,
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              connect_via: {
                client_side_validation: true,
                required: false,
                serialized_name: 'connectVia',
                type: {
                  name: 'Composite',
                  class_name: 'IntegrationRuntimeReference'
                }
              },
              description: {
                client_side_validation: true,
                required: false,
                serialized_name: 'description',
                type: {
                  name: 'String'
                }
              },
              parameters: {
                client_side_validation: true,
                required: false,
                serialized_name: 'parameters',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ParameterSpecificationElementType',
                      type: {
                        name: 'Composite',
                        class_name: 'ParameterSpecification'
                      }
                  }
                }
              },
              annotations: {
                client_side_validation: true,
                required: false,
                serialized_name: 'annotations',
                type: {
                  name: 'Sequence',
                  element: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'ObjectElementType',
                      type: {
                        name: 'Object'
                      }
                  }
                }
              },
              type: {
                client_side_validation: true,
                required: true,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              endpoint: {
                client_side_validation: true,
                required: true,
                serialized_name: 'typeProperties.endpoint',
                type: {
                  name: 'Object'
                }
              },
              marketplace_id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'typeProperties.marketplaceID',
                type: {
                  name: 'Object'
                }
              },
              seller_id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'typeProperties.sellerID',
                type: {
                  name: 'Object'
                }
              },
              mws_auth_token: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.mwsAuthToken',
                type: {
                  name: 'Composite',
                  polymorphic_discriminator: 'type',
                  uber_parent: 'SecretBase',
                  class_name: 'SecretBase'
                }
              },
              access_key_id: {
                client_side_validation: true,
                required: true,
                serialized_name: 'typeProperties.accessKeyId',
                type: {
                  name: 'Object'
                }
              },
              secret_key: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.secretKey',
                type: {
                  name: 'Composite',
                  polymorphic_discriminator: 'type',
                  uber_parent: 'SecretBase',
                  class_name: 'SecretBase'
                }
              },
              use_encrypted_endpoints: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.useEncryptedEndpoints',
                type: {
                  name: 'Object'
                }
              },
              use_host_verification: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.useHostVerification',
                type: {
                  name: 'Object'
                }
              },
              use_peer_verification: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.usePeerVerification',
                type: {
                  name: 'Object'
                }
              },
              encrypted_credential: {
                client_side_validation: true,
                required: false,
                serialized_name: 'typeProperties.encryptedCredential',
                type: {
                  name: 'Object'
                }
              }
            }
          }
        }
      end
    end
  end
end
