# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::BatchAI::Mgmt::V2017_09_01_preview
  module Models
    #
    # Contains information about the File Server.
    #
    class FileServer < Resource

      include MsRestAzure

      # @return [String] The size of the virtual machine of the File Server.
      # For information about available VM sizes for File Server from the
      # Virtual Machines Marketplace, see Sizes for Virtual Machines (Linux).
      attr_accessor :vm_size

      # @return [SshConfiguration] SSH settings for the File Server.
      attr_accessor :ssh_configuration

      # @return [DataDisks] Settings for the data disk which would be created
      # for the File Server.
      attr_accessor :data_disks

      # @return [ResourceId] Specifies the identifier of the subnet.
      attr_accessor :subnet

      # @return [MountSettings] Details of the File Server.
      attr_accessor :mount_settings

      # @return [DateTime] Time when the status was changed.
      attr_accessor :provisioning_state_transition_time

      # @return [DateTime] Time when the FileServer was created.
      attr_accessor :creation_time

      # @return [FileServerProvisioningState] Specifies the provisioning state
      # of the File Server. Possible values: creating - The File Server is
      # getting created. updating - The File Server creation has been accepted
      # and it is getting updated. deleting - The user has requested that the
      # File Server be deleted, and it is in the process of being deleted.
      # failed - The File Server creation has failed with the specified
      # errorCode. Details about the error code are specified in the message
      # field. succeeded - The File Server creation has succeeded. Possible
      # values include: 'creating', 'updating', 'deleting', 'succeeded',
      # 'failed'
      attr_accessor :provisioning_state


      #
      # Mapper for FileServer class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'FileServer',
          type: {
            name: 'Composite',
            class_name: 'FileServer',
            model_properties: {
              id: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'id',
                type: {
                  name: 'String'
                }
              },
              name: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'name',
                type: {
                  name: 'String'
                }
              },
              type: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'type',
                type: {
                  name: 'String'
                }
              },
              location: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'location',
                type: {
                  name: 'String'
                }
              },
              tags: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'tags',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              vm_size: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.vmSize',
                type: {
                  name: 'String'
                }
              },
              ssh_configuration: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.sshConfiguration',
                type: {
                  name: 'Composite',
                  class_name: 'SshConfiguration'
                }
              },
              data_disks: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.dataDisks',
                type: {
                  name: 'Composite',
                  class_name: 'DataDisks'
                }
              },
              subnet: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.subnet',
                type: {
                  name: 'Composite',
                  class_name: 'ResourceId'
                }
              },
              mount_settings: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.mountSettings',
                type: {
                  name: 'Composite',
                  class_name: 'MountSettings'
                }
              },
              provisioning_state_transition_time: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.provisioningStateTransitionTime',
                type: {
                  name: 'DateTime'
                }
              },
              creation_time: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.creationTime',
                type: {
                  name: 'DateTime'
                }
              },
              provisioning_state: {
                client_side_validation: true,
                required: false,
                read_only: true,
                serialized_name: 'properties.provisioningState',
                type: {
                  name: 'Enum',
                  module: 'FileServerProvisioningState'
                }
              }
            }
          }
        }
      end
    end
  end
end
