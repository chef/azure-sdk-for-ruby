# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::BatchAI::Mgmt::V2017_09_01_preview
  module Models
    #
    # Parameters supplied to the Create operation.
    #
    class ClusterCreateParameters

      include MsRestAzure

      # @return [String] The region in which to create the cluster.
      attr_accessor :location

      # @return [Hash{String => String}] The user specified tags associated
      # with the Cluster.
      attr_accessor :tags

      # @return [String] The size of the virtual machines in the cluster. All
      # virtual machines in a cluster are the same size. For information about
      # available VM sizes for clusters using images from the Virtual Machines
      # Marketplace (see Sizes for Virtual Machines (Linux) or Sizes for
      # Virtual Machines (Windows). Batch AI service supports all Azure VM
      # sizes except STANDARD_A0 and those with premium storage (STANDARD_GS,
      # STANDARD_DS, and STANDARD_DSV2 series).
      attr_accessor :vm_size

      # @return [VmPriority] dedicated or lowpriority. Default is dedicated.
      # Possible values include: 'dedicated', 'lowpriority'. Default value:
      # 'dedicated' .
      attr_accessor :vm_priority

      # @return [ScaleSettings] Desired scale for the cluster.
      attr_accessor :scale_settings

      # @return [VirtualMachineConfiguration] Settings for OS image and mounted
      # data volumes.
      attr_accessor :virtual_machine_configuration

      # @return [NodeSetup] Setup to be done on all compute nodes in the
      # cluster.
      attr_accessor :node_setup

      # @return [UserAccountSettings] Settings for user account that will be
      # created on all compute nodes of the cluster.
      attr_accessor :user_account_settings

      # @return [ResourceId] Specifies the identifier of the subnet. .
      attr_accessor :subnet


      #
      # Mapper for ClusterCreateParameters class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'ClusterCreateParameters',
          type: {
            name: 'Composite',
            class_name: 'ClusterCreateParameters',
            model_properties: {
              location: {
                client_side_validation: true,
                required: true,
                serialized_name: 'location',
                type: {
                  name: 'String'
                }
              },
              tags: {
                client_side_validation: true,
                required: false,
                serialized_name: 'tags',
                type: {
                  name: 'Dictionary',
                  value: {
                      client_side_validation: true,
                      required: false,
                      serialized_name: 'StringElementType',
                      type: {
                        name: 'String'
                      }
                  }
                }
              },
              vm_size: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.vmSize',
                type: {
                  name: 'String'
                }
              },
              vm_priority: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.vmPriority',
                default_value: 'dedicated',
                type: {
                  name: 'Enum',
                  module: 'VmPriority'
                }
              },
              scale_settings: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.scaleSettings',
                type: {
                  name: 'Composite',
                  class_name: 'ScaleSettings'
                }
              },
              virtual_machine_configuration: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.virtualMachineConfiguration',
                type: {
                  name: 'Composite',
                  class_name: 'VirtualMachineConfiguration'
                }
              },
              node_setup: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.nodeSetup',
                type: {
                  name: 'Composite',
                  class_name: 'NodeSetup'
                }
              },
              user_account_settings: {
                client_side_validation: true,
                required: true,
                serialized_name: 'properties.userAccountSettings',
                type: {
                  name: 'Composite',
                  class_name: 'UserAccountSettings'
                }
              },
              subnet: {
                client_side_validation: true,
                required: false,
                serialized_name: 'properties.subnet',
                type: {
                  name: 'Composite',
                  class_name: 'ResourceId'
                }
              }
            }
          }
        }
      end
    end
  end
end
