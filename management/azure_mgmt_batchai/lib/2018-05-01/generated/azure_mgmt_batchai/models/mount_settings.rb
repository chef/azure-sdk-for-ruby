# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Azure::BatchAI::Mgmt::V2018_05_01
  module Models
    #
    # File Server mount Information.
    #
    class MountSettings

      include MsRestAzure

      # @return [String] Mount Point. Path where the data disks are mounted on
      # the File Server.
      attr_accessor :mount_point

      # @return [String] Public IP. Public IP address of the File Server which
      # can be used to SSH to the node from outside of the subnet.
      attr_accessor :file_server_public_ip

      # @return [String] Internal IP. Internal IP address of the File Server
      # which can be used to access the File Server from within the subnet.
      attr_accessor :file_server_internal_ip


      #
      # Mapper for MountSettings class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          client_side_validation: true,
          required: false,
          serialized_name: 'MountSettings',
          type: {
            name: 'Composite',
            class_name: 'MountSettings',
            model_properties: {
              mount_point: {
                client_side_validation: true,
                required: false,
                serialized_name: 'mountPoint',
                type: {
                  name: 'String'
                }
              },
              file_server_public_ip: {
                client_side_validation: true,
                required: false,
                serialized_name: 'fileServerPublicIP',
                type: {
                  name: 'String'
                }
              },
              file_server_internal_ip: {
                client_side_validation: true,
                required: false,
                serialized_name: 'fileServerInternalIP',
                type: {
                  name: 'String'
                }
              }
            }
          }
        }
      end
    end
  end
end
